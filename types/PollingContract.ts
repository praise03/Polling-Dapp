/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace PollingContract {
  export type PollStruct = {
    id: PromiseOrValue<BigNumberish>;
    topic: PromiseOrValue<string>;
    options: PromiseOrValue<string>[];
    votes: PromiseOrValue<BigNumberish>[];
  };

  export type PollStructOutput = [BigNumber, string, string[], BigNumber[]] & {
    id: BigNumber;
    topic: string;
    options: string[];
    votes: BigNumber[];
  };
}

export interface PollingContractInterface extends utils.Interface {
  functions: {
    "CreatePoll(string,string[])": FunctionFragment;
    "_pollId()": FunctionFragment;
    "getPoll(uint256)": FunctionFragment;
    "hasVoted(address,uint256)": FunctionFragment;
    "polls(uint256)": FunctionFragment;
    "vote(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CreatePoll"
      | "_pollId"
      | "getPoll"
      | "hasVoted"
      | "polls"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CreatePoll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "_pollId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoll",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "polls",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "CreatePoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_pollId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {};
}

export interface PollingContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PollingContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CreatePoll(
      _topic: PromiseOrValue<string>,
      _options: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _pollId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoll(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PollingContract.PollStructOutput] & {
        poll: PollingContract.PollStructOutput;
      }
    >;

    hasVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; topic: string }>;

    vote(
      pollId: PromiseOrValue<BigNumberish>,
      optionIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CreatePoll(
    _topic: PromiseOrValue<string>,
    _options: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _pollId(overrides?: CallOverrides): Promise<BigNumber>;

  getPoll(
    pollId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PollingContract.PollStructOutput>;

  hasVoted(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  polls(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { id: BigNumber; topic: string }>;

  vote(
    pollId: PromiseOrValue<BigNumberish>,
    optionIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CreatePoll(
      _topic: PromiseOrValue<string>,
      _options: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PollingContract.PollStructOutput>;

    _pollId(overrides?: CallOverrides): Promise<BigNumber>;

    getPoll(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PollingContract.PollStructOutput>;

    hasVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; topic: string }>;

    vote(
      pollId: PromiseOrValue<BigNumberish>,
      optionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    CreatePoll(
      _topic: PromiseOrValue<string>,
      _options: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _pollId(overrides?: CallOverrides): Promise<BigNumber>;

    getPoll(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      pollId: PromiseOrValue<BigNumberish>,
      optionIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CreatePoll(
      _topic: PromiseOrValue<string>,
      _options: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _pollId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoll(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      pollId: PromiseOrValue<BigNumberish>,
      optionIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
